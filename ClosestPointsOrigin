Q3. B Closest Points to Origin
//    We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).
//    Here, the distance between two points on a plane is the Euclidean distance.
//    You may return the answer in any order. The answer is guaranteed to be unique
//    (except for the order that it is in.)
//    NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).


public static ArrayList<ArrayList<Integer>> ClosestPointsOrigin(ArrayList<ArrayList<Integer>> A, int B) {
    ArrayList<ArrayList<Integer>> output = new ArrayList<ArrayList<Integer>>();
    int n = A.get(0).size();
    int[] distance = new int[n];
    for (int i = 0; i < n ; i++) {
        int x = A.get(i).get(0);
        int y = A.get(i).get(1);
        distance[i] = (x * x) + (y * y);
    }
    Arrays.sort(distance);
    int k = distance[B-1];
    for(int i = 0; i < n; i++){
        int x = A.get(i).get(0), y = A.get(i).get(1);
        int dist = (x * x) + (y * y);
        if (dist <= k ){
            ArrayList<Integer> tmp = new ArrayList<>();
            tmp.add(x);
            tmp.add(y);
            output.add(tmp);
        }
    }
    return output;
}


public static ArrayList<ArrayList<Integer>> ClosestPointsOrigin_C(ArrayList<ArrayList<Integer>> A, int B) {
    ArrayList<ArrayList<Integer>> output = new ArrayList<ArrayList<Integer>>();
    Collections.sort(A, new Comparator<ArrayList<Integer>>() {
        @Override
        public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
            int x1 = o1.get(0);
            int y1 = o1.get(1);
            int x2 = o2.get(0);
            int y2 = o2.get(1);
            long d1 = ((long) x1 * x1) + ((long) y1 * y1);
            long d2 = ((long) x2 * x2) + ((long) y2 * y2);
            if( d1 < d2 ) return -1;
            if( d1 > d2 ) return 1;
            return 0;
        }
    });
    for( int i = 0; i < B; i++ ) {
        output.add( A.get(i) );
    }
    return output;
}

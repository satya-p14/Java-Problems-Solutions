Q1. Tower of Hanoi
You have to find the solution to the Tower of Hanoi problem.
You have to return a 2D array of dimensions M x 3, where M is the minimum number of moves needed to solve the problem.
In each row, there should be 3 integers (disk, start, end), where:

disk - number of the disk being moved
start - number of the tower from which the disk is being moved
end - number of the tower to which the disk is being moved


public static void towerOfHanoi(int A, int src , int dest, int temp , ArrayList<ArrayList<Integer>> output){
    if (A == 0){
        return ;
    }
    towerOfHanoi(A - 1, src, temp, dest , output);
    output.add(new ArrayList<Integer>(Arrays.asList(A, src, dest)));
    towerOfHanoi(A - 1, temp, dest, src , output);
}

public static ArrayList<ArrayList<Integer>> towerOfHanoi(int A) {
    ArrayList<ArrayList<Integer>> output = new ArrayList<>();
    towerOfHanoi(A, 1, 3, 2, output);
    return output;
}

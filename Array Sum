You are given two numbers represented as integer arrays A and B, where each digit is an element.
 You have to return an array which representing the sum of the two given numbers.
The last element denotes the least significant bit, and the first element denotes the most significant bit.
Note : Array A and Array B can be of different size. ( i.e. length of Array A may not be equal to length of Array B ).

Sol 1: 

public int[] addArrays(int[] A, int[] B) {
    int m = A.length;
    int n = B.length;
    int maxLen = Math.max(m, n);
    int[] result = new int[maxLen + 1]; 

    int carry = 0;
    int i = m - 1;
    int j = n - 1;
    int k = maxLen; 

    while (i >= 0 || j >= 0) {
        int sum = carry;
        if (i >= 0) {
            sum += A[i];
            i--;
        }
        if (j >= 0) {
            sum += B[j];
            j--;
        }
        result[k] = sum % 10;
        carry = sum / 10; 
        k--; 
    }
    
    if (carry > 0) {
        result[k] = carry;
    }
    
    int start = (result[0] == 0) ? 1 : 0;
    return Arrays.copyOfRange(result, start, result.length);
}


Sol 2: 

public int[] addArrays(int[] A, int[] B) {
    int m = A.length , n = B.length;
    int[] ans = new int[Math.max(m,n)];
    int k = ans.length-1;
    int carry = 0;
    for(int i = m - 1, j = n - 1; i >=0 || j >=0 ; i--, j--){
        if(i < 0) ans[k] = B[j] + carry;
        else if(j < 0 ) ans[k] = A[i] + carry;
        else ans[k] = A[i] + B[j] + carry;
        carry = ans[k] / 10;
        if(ans[k] > 9) ans[k] = ans[k] % 10;
        k--;
    }
    if(carry > 0 ){
        int[] temp = new int[ans.length + 1];
        temp[0] = carry;
        System.arraycopy(ans, 0, temp, 1, ans.length);
        return temp;
    }
    return ans;
}
    

// Solution 1

public ArrayList<Interval> InsertIntervals(ArrayList<Interval> intervals, Interval newInterval) {
   ArrayList<Interval> output = new ArrayList<Interval>();
    int index = 0;
    while (index < intervals.size() && intervals.get(index).end < newInterval.start) {
        output.add(intervals.get(index++));
    }
    while (index < intervals.size() && intervals.get(index).start <= newInterval.end) {
        newInterval = new Interval(Math.min(newInterval.start, intervals.get(index).start),
                Math.max(newInterval.end, intervals.get(index).end));
        index++;
    }
    output.add(newInterval);
    while (index < intervals.size()) {
        output.add(intervals.get(index++));
    }
    return output;
}

// Solution 2

 public int[][] InsertIntervals(int[][] intervals, int[] newInterval) {
    int n = intervals.length;
    List<int[]> res = new ArrayList();
    boolean intervalInserted = false;
    for(int i = 0 ; i < n ; i++) {
        if(intervals[i][1] < newInterval[0]) {
            res.add(intervals[i]);
        } else if(intervals[i][0] > newInterval[1]) {
            if(!intervalInserted) {
                res.add(newInterval);
                intervalInserted = true;
            }
            res.add(intervals[i]);
        } else {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
        }
    }
    if(!intervalInserted) {
        res.add(newInterval);
    }
    return res.toArray(new int[0][]);
}

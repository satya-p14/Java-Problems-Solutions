ou are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

class Solution {
    public int findTargetSumWays(int[] nums, int target) {        
        int n = nums.length;
        int sum = 0 ; 
        for(int i = 0 ; i < n ; i++){
            sum += nums[i];
        }        
        int diff = (sum + target) / 2;
        if((sum + target) % 2 != 0  || sum < Math.abs(target)) return 0;
        int[][] dp = new int[n + 1][diff + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 0; i <= diff; i++) {
            dp[0][i] = 0;
        }
        dp[0][0] = 1;
        for (int i = 1; i <= n ; i++) {
            for (int j = 0; j <= diff; j++) {
                if(nums[i-1] <= j){
                    dp[i][j] = dp[i-1][j - nums[i-1]] + dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][diff];        
    }
}

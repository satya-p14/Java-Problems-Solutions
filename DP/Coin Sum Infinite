You are given a set of coins A. In how many ways can you make sum B assuming you have infinite amount of each coin in the set.
NOTE:
Coins in set A will be unique. Expected space complexity of this problem is O(B).
The answer can overflow. So, return the answer % (106 + 7).

public class Solution {
    public int coinchange2(int[] A, int B) {        
        int mod = 1000007;
        int N = A.length;
        int[] dp = new int[B + 1];
        Arrays.fill(dp , 0);
        dp[0] = 1;
        for(int i = 0; i < N; i++) {
            for(int j = A[i]; j <= B; j++) {
                dp[j] += dp[j - A[i]];
                dp[j] %= mod;
            }
        }
        return dp[B];
    }    
}

public class Solution {
    public int coinchange2(int[] A, int B) {
        int mod = 1000007;
        int n = A.length;
        int[][] dp = new int[n + 1][B + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= B; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j];
                dp[i][j] %= mod;
                if ((j - A[i - 1]) >= 0) {                    
                    dp[i][j] = dp[i][j - A[i - 1]] + dp[i][j];
                    dp[i][j] %= mod;
                }
            }
        }
        return dp[n][B];
    }
}




Length of Longest Fibonacci Subsequence
Given a strictly increasing array A of positive integers forming a sequence.
A sequence X1, X2, X3, ..., XN is fibonacci like if N > =3
Xi + Xi+1 = Xi+2 for all i+2 <= N
Find and return the length of the longest Fibonacci-like subsequence of A.
If one does not exist, return 0.
NOTE: A subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.

public class Solution {
    public int solve(int[] A) {
        if(A == null || A.length == 0){
            return 0;
        }
        int N = A.length;
        int[][] dp = new int[N][N];
        HashMap<Integer , Integer> map = new HashMap();        
        for(int i = 0 ; i < N ; i++){
            map.put(A[i], i);
            for(int j = i + 1 ; j < N ; j++){
                dp[i][j] = 2;
            }
        }
        for(int i = 0 ; i < N ; i++){           
            for(int j = i + 1 ; j < N ; j++){
                int k = A[j] + A[i];
                if(map.containsKey(k)){
                    int index = map.get(k);
                    dp[j][index] = 1 + dp[i][j];
                }
            }
        }
        int ans = 0;
        for(int i = 0 ; i < N ; i++){            
            for(int j = i + 1 ; j < N ; j++){
                ans = Math.max(ans , dp[i][j]);
            }
        }
        return ans == 2 ? 0 : ans;
    }
}

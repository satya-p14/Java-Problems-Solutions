Rishik likes candies a lot. So, he went to a candy-shop to buy candies.

The shopkeeper showed him N packets each containg A[i] candies for cost of C[i] nibbles, each candy in that packet has a sweetness B[i]. The shopkeeper puts the condition that Rishik can buy as many complete candy-packets as he wants but he can't buy a part of the packet.

Rishik has D nibbles, can you tell him the maximum amount of sweetness he can get from candy-packets he will buy?

Input 1:

 A = [1, 2, 3]
 B = [2, 2, 10]
 C = [2, 3, 9]
 D = 8

Input 2:

 A = [2]
 B = [5]
 C = [10]
 D = 99

Output 1:  10
Output 2: 90

public class Solution {
  public int solve(int[] A, int[] B, int[] C, int D) {
      int n = A.length;
      int[] dp = new int[D+1];
      for(int i = 1 ; i <= D ; i++){
          for(int j = 0 ; j < n ; j++){
              int candies = A[j];
              int cost = C[j];
              int sweetness = candies * B[j];
              if(cost <= i){
                  dp[i] = Math.max(dp[i] , dp[i - cost] + sweetness);
              }
          }
      }
      return dp[D];
  }
}


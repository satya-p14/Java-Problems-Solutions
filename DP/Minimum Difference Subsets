Minimum Difference Subsets
Given an integer array A containing N integers.
You need to divide the array A into two subsets S1 and S2 such that the absolute difference between their sums is minimum.
Find and return this minimum possible absolute difference.
NOTE:
Subsets can contain elements from A in any order (not necessary to be contiguous).
Each element of A should belong to any one subset S1 or S2, not both.
It may be possible that one subset remains empty.


public class Solution {
    public int MinimumDifferenceSubsets(int[] A) {
        int sum = 0;
        int n = A.length;
        for(int i = 0; i < n; i++){
            sum += A[i];
        }
        boolean[][] dp = new boolean[n+1][sum+1];
        for (int i = 0; i <= n ; i++) {
            dp[i][0] = true;
        }
        for (int i = 0; i <= sum ; i++) {
            dp[0][i] = false;
        }
        dp[0][0] = true;        
        for(int i = 1; i < n + 1; i++){
            for(int j = 1; j < sum + 1; j++){
                if(A[i-1] <= j){
                    dp[i][j] = dp[i-1][j- A[i-1]] || dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for(int j = 0; j < sum + 1; j++){
            if(dp[n][j]) ans = Math.min(ans, Math.abs(sum - 2 * j ));
        }
        return ans;
    }
}

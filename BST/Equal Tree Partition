Given a binary tree A. Check whether it is possible to partition the tree to two trees which have equal sum of values after removing exactly one edge on the original tree.

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    
    public boolean flag = false;
    
    public int solve(TreeNode A) {
        long treeSum = 0;        
        TreeNode curr = A;
        treeSum = FindTreeSum(curr);
        getPostOrderSum(A, treeSum);
        if (flag) return 1;
        return 0;

    }

    public long FindTreeSum(TreeNode A){
        if(A == null) return 0 ;
        return FindTreeSum(A.left) + FindTreeSum(A.right) + A.val;
    }

    public long getPostOrderSum(TreeNode root, long sum) {
        if (root == null) return 0;
        long currSum = getPostOrderSum(root.left, sum) + getPostOrderSum(root.right, sum) + root.val;
        if (currSum == (sum / 2)) {
            flag = true;
        }
        return currSum;
    }
}

Given a binary tree A, invert the binary tree and return it.

Inverting refers to making the left child the right child and vice versa.

Input :
 
     1
   /   \
  2     3
 / \   / \
4   5 6   7

Output :

     1
   /   \
  3     2
 / \   / \
7   6 5   4

Recursive Solution 

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode A) {
        if(A == null) return null;
        TreeNode left = invertTree(A.left);
        TreeNode right = invertTree(A.right);
        A.left = right;
        A.right = left;
        return A;
    }
}

// Iterative solution

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode A) {
        if(A == null) return null;
        Queue<TreeNode> q = new LinkedList();
        q.offer(A);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            // swap left to right and vice versa
            TreeNode temp = node.left;
            node.left = node.right;
            node.right = temp;
            if(node.left != null) q.offer(node.left);
            if(node.right != null) q.offer(node.right);            
        }
        return A;
    }
}


